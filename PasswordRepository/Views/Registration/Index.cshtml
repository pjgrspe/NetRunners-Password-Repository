@model PasswordRepository.Models.RegistrationModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>

<html lang="en">
<head>
    <title>Registration</title>
    <link href="~/Style/StyleSheetRegistration.css" rel="stylesheet">
    <link href="~/Style/StyleSheetPassGenerator.css" rel="stylesheet">
    <link href="~/Style/StyleSheetRangeInput.css" rel="stylesheet">
</head>
<body>
    @Html.Partial("_LoadingPage")
    <!--Navbar-->
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container" id="navcontainer">
            <!--Navbar Logo-->
            <a href="/Home/Index" class="navbar-brand">
                <img src="~/Elements/ICElogo200pixel.png" width="150" height="67" alt="">
            </a>
            <!--Navbar Hamburger Menu-->
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navmenu">
                <span class="navbar-toggler-icon"></span>
            </button>
            <!--Navbar Items-->
            <div class="collapse navbar-collapse" id="navmenu">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a href="/Home/Index" class="nav-link" id="navhome">HOME</a>
                    </li>
                    <li class="nav-item">
                        <a href="/Home/Contact" class="nav-link" id="navcontact">CONTACT</a>
                    </li>
                    <li class="nav-item" id="navlogin">
                        <button onclick="window.location.href='/Login/Index'" type="button" class="rounded-0 btn btn-outline-secondary" id="loginbtn">LOGIN</button>
                    </li>
                </ul>
            </div>

        </div>
    </nav>
    @{
        if (ViewBag.Error != null)
        {
            <script>
                Swal.fire({
                    position: 'top',
                    icon: 'error',
                    iconColor: '#c40f2d',
                    background: '#1a1a1a',
                    title: '@ViewBag.Error',
                    showConfirmButton: false,
                    timer: 2500
                })
            </script>
        }
    }

    <!-- Modal -->
    <div class="modal fade" id="tandcbutton-modal" tabindex="-1" aria-labelledby="ModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="ModalLabel">Terms and Conditions</h1>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <!--Form-->
                <div class="modal-body modal-xl p-4" style="margin-top:-20px; color:white;">

                    <p style="text-align: justify;">Welcome to ICE Password Repository. These terms and conditions outline the rules and regulations for the use of our password repository service. By accessing and using our password repository, you agree to comply with these terms and conditions. If you do not agree with any part of these terms, please refrain from using our service.</p>

                    <h5>1. Account Registration and Security</h5>
                    <p style="margin-left: 12px; text-align: justify;">a. You must create an account to access and use our password repository service. The information you provide during registration must be accurate and complete.</p>
                    <p style="margin-left: 12px; text-align: justify;">b. You are responsible for maintaining the confidentiality of your account credentials, including your username and password. You agree to notify us immediately of any unauthorized use of your account or any other security breach.</p>
                    <br />

                    <h5>2. Use of the Password Repository</h5>
                    <p style="margin-left: 12px; text-align: justify;">a. Our password repository is intended solely for your personal use. You are prohibited from using this service for any illegal or unauthorized purpose.</p>
                    <p style="margin-left: 12px; text-align: justify;">b. You are solely responsible for the passwords and other credentials you store in the password repository. We recommend using strong and unique passwords for each account.</p>
                    <p style="margin-left: 12px; text-align: justify;">c. You understand and acknowledge that while we implement reasonable security measures, no method of storage or transmission over the internet is completely secure. We cannot guarantee the absolute security of your stored passwords.</p>
                    <br />

                    <h5>3. Prohibited Activities</h5>
                    <p style="margin-left: 12px; text-align: justify;">a. You agree not to engage in any of the following activities while using our password repository:</p>
                    <p style="margin-left:24px">i. Sharing your account credentials with others.</p>
                    <p style="margin-left:24px">ii. Attempting to gain unauthorized access to other users' accounts.</p>
                    <p style="margin-left:24px">iii. Interfering with or disrupting the functionality of the password repository.</p>
                    <p style="margin-left:24px">iv. Uploading or transmitting any malicious software or harmful content.</p>
                    <p style="margin-left:24px">v. Violating any applicable laws or regulations.</p>
                    <br />
                    <!-- Add more sections as needed -->

                    <h5>8. Governing Law and Jurisdiction</h5>
                    <p style="margin-left: 12px; text-align: justify;">a. These terms and conditions shall be governed by and construed in accordance with the laws of [Jurisdiction]. Any disputes arising from or relating to these terms shall be subject to the exclusive jurisdiction of the courts of [Jurisdiction].</p>
                    <br />
                    <p style="text-align: justify;">By using our password repository, you acknowledge that you have read, understood, and agreed to these terms and conditions. If you do not agree with any part of these terms, please discontinue your use of the password repository.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <div id="outer">
        <!-- Modal for PASSWORD GENERATOR -->
        <div class="modal fade" id="passgen-modal" tabindex="-1" aria-labelledby="ModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content modal-content-passgen">
                    <div class="modal-header">
                        <h1 class="modal-title modal-title-passgen fs-5" id="ModalLabel">ICEPass™ Generator</h1>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <!--Form-->
                    <div class="modal-body modal-xl" style="margin-top:-10px;">
                        <div class="registration-form container d-flex justify-content-center" style="text-align:center;">
                            <div class="result" id="resultform">
                                <div class="result__title field-title">Generated Password</div>
                                <div class="result__info right">click to copy</div>
                                <div class="result__info left">copied</div>
                                <div class="result__viewbox" id="result">CLICK GENERATE</div>
                                <button id="copy-btn" style="--x: 0; --y: 0"><i class="far fa-copy"></i></button>
                            </div>
                            <div class="length range__slider" data-min="4" data-max="32">
                                <div class="length__title field-title" data-length='0'>length:</div>
                                <input id="slider1" type="range" min="4" max="32" value="16" style="margin-bottom:50px;" />
                                @*<input type="range" min="4" max="32" value="16" id="timeSlider">*@
                            </div>

                            <div class="settings">
                                <span class="settings__title field-title">settings</span>
                                <div class="setting">
                                    <input type="checkbox" id="uppercase" checked />
                                    <label for="uppercase">Include Uppercase</label>
                                </div>
                                <div class="setting">
                                    <input type="checkbox" id="lowercase" checked />
                                    <label for="lowercase">Include Lowercase</label>
                                </div>
                                <div class="setting">
                                    <input type="checkbox" id="number" checked />
                                    <label for="number">Include Numbers</label>
                                </div>
                                <div class="setting">
                                    <input type="checkbox" id="symbol" />
                                    <label for="symbol">Include Symbols</label>
                                </div>
                            </div>

                            <button class="btn generate" id="generate">Generate Password</button>
                            <script type="text/javascript">
                                // Clear the concole on every refresh
                                console.clear();
                                // set the body to full height
                                // document.body.style.height = `${innerHeight}px`

                                // Range Slider Properties.
                                // Fill : The trailing color that you see when you drag the slider.
                                // background : Default Range Slider Background
                                const slider1Props = {
                                    fill: "#9d205d",
                                    background: "rgba(255, 255, 255, 0.214)",
                                };

                                // Selecting the Range Slider container which will effect the LENGTH property of the password.
                                const slider1 = document.querySelector(".range__slider");

                                // Text which will show the value of the range slider.
                                const slider1Value = document.querySelector(".length__title");

                                // Using Event Listener to apply the fill and also change the value of the text.
                                slider1.querySelector("input").addEventListener("input", event => {
                                    slider1Value.setAttribute("data-length", event.target.value);
                                    applyFill(event.target);
                                });
                                // Selecting the range input and passing it in the applyFill func.
                                applyFill(slider1.querySelector("input"));
                                // This function is responsible to create the trailing color and setting the fill.
                                function applyFill(slider1) {
                                    const percentage = (100 * (slider1.value - slider1.min)) / (slider1.max - slider1.min);
                                    const bg = `linear-gradient(90deg, ${slider1Props.fill} ${percentage}%, ${slider1Props.background} ${percentage +
                                        0.1}%)`;
                                    slider1.style.background = bg;
                                    slider1Value.setAttribute("data-length", slider1.value);
                                }

                                // Object of all the function names that we will use to create random letters of password
                                const randomFunc = {
                                    lower: getRandomLower,
                                    upper: getRandomUpper,
                                    number: getRandomNumber,
                                    symbol: getRandomSymbol,
                                };

                                // Random more secure value
                                function secureMathRandom() {
                                    return window.crypto.getRandomValues(new Uint32Array(1))[0] / (Math.pow(2, 32) - 1);
                                }

                                // Generator Functions
                                // All the functions that are responsible to return a random value taht we will use to create password.
                                function getRandomLower() {
                                    return String.fromCharCode(Math.floor(Math.random() * 26) + 97);
                                }
                                function getRandomUpper() {
                                    return String.fromCharCode(Math.floor(Math.random() * 26) + 65);
                                }
                                function getRandomNumber() {
                                    return String.fromCharCode(Math.floor(secureMathRandom() * 10) + 48);
                                }
                                function getRandomSymbol() {
                                    const symbols = '~!@@#$%^&*()_+{}":?><;.,';
                                    return symbols[Math.floor(Math.random() * symbols.length)];
                                }

                                // Selecting all the DOM Elements that are necessary -->

                                // The Viewbox where the result will be shown
                                const resultEl = document.getElementById("result");
                                // The input slider, will use to change the length of the password
                                const lengthEl = document.getElementById("slider1");

                                // Checkboxes representing the options that is responsible to create differnt type of password based on user
                                const uppercaseEl = document.getElementById("uppercase");
                                const lowercaseEl = document.getElementById("lowercase");
                                const numberEl = document.getElementById("number");
                                const symbolEl = document.getElementById("symbol");

                                // Button to generate the password
                                const generateBtn = document.getElementById("generate");
                                // Button to copy the text
                                const copyBtn = document.getElementById("copy-btn");
                                // Result viewbox container
                                const resultContainer = document.querySelector(".result");
                                // Text info showed after generate button is clicked
                                const copyInfo = document.querySelector(".result__info.right");
                                // Text appear after copy button is clicked
                                const copiedInfo = document.querySelector(".result__info.left");

                                // if this variable is trye only then the copyBtn will appear, i.e. when the user first click generate the copyBth will interact.
                                let generatedPassword = false;

                                // Update Css Props of the COPY button
                                // Getting the bounds of the result viewbox container
                                let resultContainerBound = {
                                    left: resultContainer.getBoundingClientRect().left,
                                    top: resultContainer.getBoundingClientRect().top,
                                };
                                // This will update the position of the copy button based on mouse Position
                                resultContainer.addEventListener("mousemove", e => {
                                    resultContainerBound = {
                                        left: resultContainer.getBoundingClientRect().left,
                                        top: resultContainer.getBoundingClientRect().top,
                                    };
                                    if (generatedPassword) {
                                        copyBtn.style.opacity = '1';
                                        copyBtn.style.pointerEvents = 'all';
                                        copyBtn.style.setProperty("--x", `${e.x - resultContainerBound.left}px`);
                                        copyBtn.style.setProperty("--y", `${e.y - resultContainerBound.top}px`);
                                    } else {
                                        copyBtn.style.opacity = '0';
                                        copyBtn.style.pointerEvents = 'none';
                                    }
                                });
                                window.addEventListener("resize", e => {
                                    resultContainerBound = {
                                        left: resultContainer.getBoundingClientRect().left,
                                        top: resultContainer.getBoundingClientRect().top,
                                    };
                                });

                                // Copy Password in clipboard
                                copyBtn.addEventListener("click", () => {
                                    const textarea = document.createElement("textarea");
                                    const password = resultEl.innerText;
                                    if (!password || password == "CLICK GENERATE") {
                                        return;
                                    }
                                    textarea.value = password;
                                    document.body.appendChild(textarea);
                                    textarea.select();
                                    // Copy the text inside the text field
                                    navigator.clipboard.writeText(textarea.value);;
                                    textarea.remove();
                                    copyInfo.style.transform = "translateY(200%)";
                                    copyInfo.style.opacity = "0";
                                    copiedInfo.style.transform = "translateY(0%)";
                                    copiedInfo.style.opacity = "0.75";
                                    // Alert the copied text
                                    /*alert("Copied the text: " + copyText.value);*/
                                    const Toast = Swal.mixin({
                                        toast: true,
                                        position: 'top',
                                        showConfirmButton: false,
                                        timer: 3000,
                                        timerProgressBar: true,
                                        didOpen: (toast) => {
                                            toast.addEventListener('mouseenter', Swal.stopTimer)
                                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                                        }
                                    })

                                    Toast.fire({
                                        icon: 'success',
                                        iconColor: '#70cc72',
                                        title: 'Copied "ICEPass"!',
                                        background: '#1a1a1a',
                                    })
                                });

                                // When Generate is clicked Password id generated.
                                generateBtn.addEventListener("click", () => {
                                    const length = +lengthEl.value;
                                    const hasLower = lowercaseEl.checked;
                                    const hasUpper = uppercaseEl.checked;
                                    const hasNumber = numberEl.checked;
                                    const hasSymbol = symbolEl.checked;
                                    generatedPassword = true;
                                    resultEl.innerText = generatePassword(length, hasLower, hasUpper, hasNumber, hasSymbol);
                                    copyInfo.style.transform = "translateY(0%)";
                                    copyInfo.style.opacity = "0.75";
                                    copiedInfo.style.transform = "translateY(200%)";
                                    copiedInfo.style.opacity = "0";
                                });

                                // Function responsible to generate password and then returning it.
                                function generatePassword(length, lower, upper, number, symbol) {
                                    let generatedPassword = "";
                                    const typesCount = lower + upper + number + symbol;
                                    const typesArr = [{ lower }, { upper }, { number }, { symbol }].filter(item => Object.values(item)[0]);
                                    if (typesCount === 0) {
                                        return "";
                                    }
                                    for (let i = 0; i < length; i++) {
                                        typesArr.forEach(type => {
                                            const funcName = Object.keys(type)[0];
                                            generatedPassword += randomFunc[funcName]();
                                        });
                                    }
                                    return generatedPassword.slice(0, length)
                                        .split('').sort(() => Math.random() - 0.5)
                                        .join('');
                                }

                                // function that handles the checkboxes state, so at least one needs to be selected. The last checkbox will be disabled.
                                function disableOnlyCheckbox() {
                                    let totalChecked = [uppercaseEl, lowercaseEl, numberEl, symbolEl].filter(el => el.checked)
                                    totalChecked.forEach(el => {
                                        if (totalChecked.length == 1) {
                                            el.disabled = true;
                                        } else {
                                            el.disabled = false;
                                        }
                                    })
                                }

                                [uppercaseEl, lowercaseEl, numberEl, symbolEl].forEach(el => {
                                    el.addEventListener('click', () => {
                                        disableOnlyCheckbox()
                                    })
                                })
                            </script>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!--Content-->
        <section class="text-light p-5">
            <div class="container d-flex justify-content-center" id="maincontainer">
                <div class="justify-content-center" id="content">
                    <!--Title-->
                    <div class="d-flex justify-content-center" id="title" style="display:block; white-space:nowrap; margin-left:auto; margin-right:auto;">
                        <h1 align="center">
                            / REGISTER /
                        </h1>
                    </div>
                    <!--Sub-heading-->
                    <div class="d-flex justify-content-center">
                        <div class="d-flex justify-content-center col-5 col-md-6 col-xl-4">
                            <h6 align="center">
                                Thank you for joining us! Please register by completing the information below
                            </h6>
                        </div>
                    </div>
                    <!--Form-->
                    @using (@Html.BeginForm("Register", "Registration", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        <div class="registration-form container d-flex justify-content-center" style="text-align:center;">
                            <!--ON REVIEW IF IT SHOULD BE INCLUDED-->
                            <div class="d-flex justify-content-center w-100">
                                <div class="form-floating" style="margin-top: 3px; margin-right:5px; width: 200px;">
                                    @Html.TextBoxFor(Model => Model.textbox_FIRST_NAME, new { @class = "form-control rounded-0 w-100", id = "floatingFirstName", placeholder = "First Name", required = "required", })
                                    <label for="floatingFirstName">First Name</label>
                                </div>
                                <div class="form-floating" style="margin-top: 3px; margin-left: 5px; width: 200px;">
                                    @Html.TextBoxFor(Model => Model.textbox_LAST_NAME, new { @class = "form-control rounded-0 w-100", id = "floatingLastName", placeholder = "Last Name", required = "required", })
                                    <label for="floatingLastName">Last Name</label>
                                </div>
                            </div>
                            <div class="d-flex justify-content-center w-100">
                                <div class="form-floating" style="margin-top: 10px; width: 410px;">
                                    @Html.TextBoxFor(Model => Model.textbox_EMAIL, new { @class = "form-control rounded-0 w-100", id = "floatingEmail", type = "email", placeholder = "Email", required = "required", })
                                    <label for="floatingEmail">Email</label>
                                </div>
                            </div>
                            <div class="d-flex justify-content-center w-100">
                                <div class="form-floating" style="margin-top: 10px; width: 410px;">
                                    @Html.TextBoxFor(Model => Model.textbox_USERNAME, new { @class = "form-control rounded-0 w-100", id = "floatingUsername", placeholder = "Username", required = "required", minlength = "4" })
                                    <label for="floatingUsername">Username</label>
                                </div>
                            </div>
                            <div class="d-flex justify-content-center w-100">
                                <div class="form-floating" style="margin-top: 10px; width: 410px;">
                                    @Html.PasswordFor(Model => Model.textbox_PASSWORD, new { @class = "form-control rounded-0 w-100", id = "floatingPassword-register", placeholder = "Password", required = "required", minlength = "4" })
                                    <label for="floatingPassword-register">Password</label>
                                    <span>
                                        <!--Eye icon-->
                                        <img src="~/Elements/eye.svg" id="eyeicon-register" />
                                        <img src="~/Elements/passgen.svg" class="passgenicon" id="passgenicon" data-bs-toggle="modal" data-bs-target="#passgen-modal" style="cursor:pointer" />
                                    </span>
                                </div>
                            </div>
                            <div class="d-flex justify-content-center w-100">
                                <div class="form-floating" style="margin-top: 10px; width:410px;">
                                    @Html.PasswordFor(Model => Model.textbox_REPEAT_PASSWORD, new { @class = "form-control rounded-0 w-100", id = "floatingRePassword-register", placeholder = "Re-enter Password", required = "required" })
                                    <label for="floatingRePassword-register">Re-enter Password</label>
                                </div>
                            </div>
                        </div>
                        <!--Terms and Conditions checkbox-->
                        <div class="d-flex justify-content-center">
                            <div class="form-check" style="text-align:left;margin-top:20px; width:410px;">
                                @Html.CheckBoxFor(Model => Model.checkbox_acceptTerms, new { @class = "form-check-input", type = "checkbox", id = "checkbox_terms", style = "text-align: center", required = "required" })
                                <label class="form-check-label" for="checkbox_terms">I agree to the <a style="cursor:pointer;" data-bs-toggle="modal" data-bs-target="#tandcbutton-modal" id="tandcprompt">Terms and Condition.</a></label>
                            </div>
                        </div>
                        <!--Register button-->
                        <div class="d-flex justify-content-center">
                            <div style="margin-top:25px" class="d-flex justify-content-center col-xl-5 col-lg-12 mb-2 ">
                                <button class="btn btn-outline-secondary rounded-0" aria-pressed="true" id="getstartedbtn">
                                    REGISTER →
                                </button>
                            </div>
                        </div>
                        <!--Redirect to login-->
                        <div class="d-flex justify-content-center">
                            <p>
                                Already have an account? <a href="/Login/Index" id="signinprompt">Sign in here.</a>
                            </p>
                        </div>
                    }
                </div>
            </div>
        </section>
    </div>
    <script type="text/javascript">
        window.onload = function () {
            setTimeout(function () {
                document.body.removeChild(modal);
                loading.style.display = "none";
            }, 0);
        };
    </script>
</body>
</html>